shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
install.packages("viridis")
library(viridis)
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
pal <- viridis(n = 10)
pal
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
pal <- colorQuantile(viridis(n=10))
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
#install.packages("ggplot2")
library(ggplot2)
library(reshape2)
set.seed(111)
mydf <- data.frame(value_1 = sample.int(n = 1000000, size = 100),
value_2 = sample.int(n = 1000000, size = 100),
value_3 = sample.int(n = 1000000, size = 100),
value_4 = sample.int(n = 1000000, size = 100))
mydf <- t(mydf)
df <- melt(mydf)
df$rowid <- 1:length(mydf)
colnames(df)
colnames(df)
ggplot(df, aes(Var1, value, group=factor(Var2))) + geom_line(aes(color=factor(Var2)))
ggplot(df, aes(Var2, value, group=factor(Var1))) + geom_line(aes(color=factor(Var1)))
head(df)
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
options(scipen=999)
#County Shape files
# Read in the county shape files
us.map.county <- readOGR(dsn= './cb_2018_us_county_500k', layer = "cb_2018_us_county_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.county <- us.map.county[!us.map.county$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp <- gSimplify(us.map.county, tol = 0.0125, topologyPreserve = FALSE)
simplified_county <- SpatialPolygonsDataFrame(simplified_shp, data = us.map.county@data)
#format(object.size(simplified), units = "Mb")
#State shape files
us.map.state <- readOGR(dsn= './cb_2018_us_state_500k', layer = "cb_2018_us_state_500k", stringsAsFactors = FALSE)
# Remove Alaska(2), Hawaii(15), Puerto Rico (72), Guam (66), Virgin Islands (78), American Samoa (60) Mariana Islands (69), Micronesia (64), Marshall Islands (68), Palau (70), Minor Islands (74)
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("02", "15", "72", "66", "78", "60", "69","64", "68", "70", "74"),]
# Make sure other outling islands are removed.
us.map.state <- us.map.state[!us.map.state$STATEFP %in% c("81", "84", "86", "87", "89", "71", "76","95", "79"),]
simplified_shp_v1 <- gSimplify(us.map.state, tol = 0.0001, topologyPreserve = FALSE)
simplified_state <- SpatialPolygonsDataFrame(simplified_shp_v1, data = us.map.state@data)
format(object.size(us.map.state), units = "Mb")
### Create dummy data
set.seed(111)
mydf <- data.frame(place = unique(us.map.county$GEOID),
value_1 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_2 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_3 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE),
value_4 = sample.int(n = 1000000, size = length(unique(us.map.county$GEOID)), replace = TRUE))
# Import the monthly enrollment data for all medicare products
# found here https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/CMSProgramStatistics/Downloads/Enrollment_Dashboard_Data_File.zip
df <- read_excel("./data/enrollment_data.xlsx", sheet = 3, skip = 5)
colnames(df) <- c("Year", "Month", "State", "County", "OriginalMedicare", "MedAdvOther", "MedicareTotal",
"PrescriptionDrug", "MedAdvPresDrug", "PresDrugTotal")
df <- transform(df, OrigMedicare_perc = as.integer(100*OriginalMedicare / MedicareTotal))
df <- transform(df, MedAdvOther_perc = as.integer(100*MedAdvOther / MedicareTotal))
df <- transform(df, MedicareTotal_perc = 100*MedicareTotal / MedicareTotal)
df <- as.data.frame(merge(df, us.map.state, by.x="State", by.y="NAME"))
simplified_county
simplified_county$STATEFP
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
which(simplified_county$STATEFP == "06"), ]
simplified_county[which(simplified_county$STATEFP == input$state), ]
simplified_county[which(simplified_county$STATEFP == "06"), ]
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp()
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
shiny::runApp('C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage')
head(county.data)
getwd()
setwd("C:/Users/NYCZE/Desktop/Z")
setwd("C:/Users/NYCZE/Desktop/Zach-Escalante-Code/shiny_app/medicareAdvantage/")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
# Melt dataframes
county.df <- melt(county.df, "Parent_Organization")
county.df$variable <- as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
head(county.df)
county.data <- read_excel('./data/county_payer_stats_t12mo.xlsx')
head(county.data)
county.df <- county.data %>%
filter(State == "AL" & FIPS == "1001") %>%                  # filter based on state and FIPS code
arrange(desc(!! sym(colnames(county.data)[5]))) %>%  # sort based on last months' values
select (-c(State, State_FIPS, FIPS))                        # Make sure to drop unnecessary columns
# Take the top 10
county.df <- head(county.df, 10)
head(county.df)
# Melt dataframes
county.df <- melt(county.df, "Parent_Organization")
county.df$variable <- as.Date( as.numeric (as.character(county.df$variable) ),origin="1899-12-30")
head(county.df)
pct <- function(x) {x/lag(x)}
head(county.df)
county.df %>% group_by(Parent_Organization) %>% mutate_each(funs(pct), c(value))
county.df
county.df/stats::lag(county.df,-1) - 1
county.df/stats::lag(county.df,-1) - 1
county.df
county.df/stats::lag(county.df,1) - 1
diff(county.df)/county.df[-nrow(county.df),] * 100
pct <- function(x) {(x/lag(x)-1)*100}
pct <- function(x) {(x/lag(x)-1)*100}
county.df %>% group_by(Parent_Organization) %>% mutate(funs(pct), c(value))
pct <- function(x) {x/lag(x)}
county.df %>% group_by(Parent_Organization) %>% mutate(funs(pct), c(value))
county.df %>% group_by(Parent_Organization) %>% mutate(x/lag(x), c(value))
county.df %>% group_by(Parent_Organization) %>% mutate(funs(pct), value)
head(county.df)
county.df %>%
gather(key = variable, value = value, value) %>%
group_by(Parent_Organization, variable) %>%
mutate(lag = lag(value)) %>%
mutate(pct.change = (value - lag) / lag)
head(county.df)
lag(county.df$value)
county.df$value - lag(county.df$value)
county.df %>% group_by(Parent_Organization) %>% mutate(lvar = lag(value))
lag(county.df$value)
county.df %>% group_by(Parent_Organization)
county.df %>% group_by(Parent_Organization) %>% mutate(lvar = lag(value))
pct <- function(x) {x/lag(x)}
pct <- function(x) {x/lag(x)}
county.df %>% group_by(Parent_Organization) %>% mutate(funs(pct), value)
test <- county.df %>% group_by(Parent_Organization) %>% mutate(funs(pct), value)
test
View(test)
View(test)
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = lag(value))
View(test)
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = lag(value) - value)
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = lag(value))
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = value - lag(value))
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = (value - lag(value))/lag(value))
pct <- function(x) {x/lag(x)}
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = 100*(value - lag(value))/lag(value))
ggplot(test, aes(variable, lvar, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
ggplot(county.df, aes(variable, value, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
ggplot(test, aes(variable, lvar, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
ggplot(county.df, aes(variable, value, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
# Create ggplot2 graph
ggplot(test, aes(variable, lvar, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
test <- county.df %>% group_by(Parent_Organization) %>% mutate(lvar = 100*(lag(value) - value)/lag(value))
ggplot(test, aes(variable, lvar, group = Parent_Organization, color = Parent_Organization)) +
geom_line()
runApp()
runApp()
